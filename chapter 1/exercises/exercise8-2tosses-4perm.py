# Chapter 1 - Exercise 8 - two coin tosses case - four permutations
# Author: Michael Kwak
# Date: January 2 2017

#######################################################################################

#
# number of tosses defined as a literal constant
#


tosses = 2

#
# manual enumeration of all head/tail permutations for two tosses.
# tried to derive this programmatically but Python manifested strange
# behaviors when attempting to assign new values to a specific element
# within a multi-dimensional list generated by list comprehension
#

ht = (('H','H'),('H','T'),('T','H'),('T','T'))


#######################################################################################
#######################################################################################


#
# peter_perm_winnings[i] = total winnings result for i-th permutation in ht tuple  
#

peter_perm_winnings = [0,0,0,0]
peter_perm_lead = [0,0,0,0]

prop_zero_winnings = 0
prop_leads = 0


#######################################################################################


#
# calculate peter's winnings and leads for each permutation case
#

print()
print("********************* Peter *********************")

for perm in range(0, tosses ** 2):

	#
	# at start of each permutation, toss winnings are set to zero
	#

	peter_toss_winnings = [0,0]


	#
	# display the current permutation being worked
	#

	print(ht[perm])


	#
	# analyze the permuation for results per toss, total winnings, and total times in lead
	#

	for toss in range(0, tosses):

		# calculate rolling results of peter's winnings for all tosses
		# if heads peter wins $1, if heads paul loses $ 1
		#

		if (ht[perm][toss] == 'H'):
				
			peter_toss_winnings[toss] = peter_perm_winnings[perm] + 1
						
		elif (ht[perm][toss] == 'T'):
	
			peter_toss_winnings[toss] = peter_perm_winnings[perm] - 1
	
		
		#
		# save final toss winnings result
		#

		peter_perm_winnings[perm] = peter_toss_winnings[toss]
		print("Toss: ", toss, "Peter's winnings ", peter_toss_winnings[toss])


		#
		# calculate number of times paul was in the lead for all tosses
		#

		if (peter_toss_winnings[toss] > 0):

			peter_perm_lead[perm] = peter_perm_lead[perm] + 1	

		elif ((peter_toss_winnings[toss] == 0) and (peter_toss_winnings[toss - 1] > 0)):
			
			peter_perm_lead[perm] = peter_perm_lead[perm] + 1


#######################################################################################


	# print results for this iteration of permutation analysis	

	print("'peter_toss_winnings' list is: ", peter_toss_winnings) 
	print("'peter_perm_win' list is currently: ", peter_perm_winnings)
	print("'peter_perm_lead' list is currently: ", peter_perm_lead)
	print()


#######################################################################################


for index in range(0, tosses ** 2):

	if (peter_perm_winnings[index] == 0):
	
		prop_zero_winnings = prop_zero_winnings + 1

	if (peter_perm_lead[index] > 0):
				
		prop_leads = prop_leads + 1


#######################################################################################


print("Proportion of times winnings is zero: ", prop_zero_winnings / tosses ** 2)
print("Proportion of times in the lead: ", prop_leads / tosses ** 2)
print()


#######################################################################################
#######################################################################################


#
# paul_perm_winnings[i] = total winnings result for i-th permutation in ht tuple  
#
paul_perm_winnings = [0,0,0,0]
paul_perm_lead = [0,0,0,0]

prop_zero_winnings = 0
prop_leads = 0


#######################################################################################


#
# calculate paul's winnings and leads for each permutation case
#

print()
print("********************* Paul *********************")

for perm in range(0, tosses ** 2):

	#
	# at start of each permutation, toss winnings are set to zero
	#

	paul_toss_winnings = [0,0]


	#
	# display the current permutation being worked
	#

	print(ht[perm])


	#
	# analyze the permuation for results per toss, total winnings, and total times in lead
	#

	for toss in range(0, tosses):

		# calculate rolling results of paul's winnings for all tosses
		# if tails paul wins $1, if heads paul loses $ 1
		#

		if (ht[perm][toss] == 'T'):
				
			paul_toss_winnings[toss] = paul_perm_winnings[perm] + 1
						
		elif (ht[perm][toss] == 'H'):
	
			paul_toss_winnings[toss] = paul_perm_winnings[perm] - 1
	
		
		#
		# save final toss winnings result
		#

		paul_perm_winnings[perm] = paul_toss_winnings[toss]
		print("Toss: ", toss, "Paul's winnings ", paul_toss_winnings[toss])


		#
		# calculate number of times paul was in the lead for all tosses
		#

		if (paul_toss_winnings[toss] > 0):

			paul_perm_lead[perm] = paul_perm_lead[perm] + 1	

		elif ((paul_toss_winnings[toss] == 0) and (paul_toss_winnings[toss - 1] > 0)):
			
			paul_perm_lead[perm] = paul_perm_lead[perm] + 1


#######################################################################################


	# print results for this iteration of permutation analysis	

	print("'paul_toss_winnings' list is: ", paul_toss_winnings) 
	print("'paul_perm_win' list is currently: ", paul_perm_winnings)
	print("'paul_perm_lead' list is currently: ", paul_perm_lead)
	print()


#######################################################################################


for index in range(0, tosses ** 2):

	if (paul_perm_winnings[index] == 0):
	
		prop_zero_winnings = prop_zero_winnings + 1

	if (paul_perm_lead[index] > 0):
				
		prop_leads = prop_leads + 1


#######################################################################################


print("Proportion of times winnings is zero: ", prop_zero_winnings / tosses ** 2)
print("Proportion of times in the lead: ", prop_leads / tosses ** 2)
print()
	




	

	
		











